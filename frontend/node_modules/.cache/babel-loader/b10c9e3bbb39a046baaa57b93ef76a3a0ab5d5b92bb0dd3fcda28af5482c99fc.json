{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\kyh-CafeProject\\\\CafeProject\\\\Cafe_Project\\\\frontend\\\\src\\\\component\\\\login.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport '../App.css';\n\n// 로그인 컴포넌트\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Login({\n  setUser\n}) {\n  _s();\n  // 사용자 ID, 비밀번호, 로딩 상태, 에러 메시지 상태 변수\n  const [userId, setUserId] = useState(''); // 사용자 ID 상태\n  const [password, setPassword] = useState(''); // 비밀번호 상태\n  const [loading, setLoading] = useState(false); // 로딩 상태\n  const [errorMessage, setErrorMessage] = useState(''); // 에러 메시지 상태\n  const navigate = useNavigate(); // 페이지 이동을 위한 훅\n\n  // 로그인 처리 함수\n  const handleLogin = async e => {\n    e.preventDefault(); // 폼 기본 제출 동작 방지\n\n    // 아이디와 비밀번호가 입력되지 않은 경우 에러 메시지 설정\n    if (!userId.trim() || !password.trim()) {\n      setErrorMessage('아이디와 비밀번호를 입력해주세요.');\n      return;\n    }\n\n    // 로그인에 필요한 사용자 정보\n    const credentials = {\n      userId,\n      userPassword: password\n    };\n    setLoading(true); // 로딩 시작\n    setErrorMessage(''); // 에러 메시지 초기화\n\n    try {\n      // 로그인 API 호출\n      const response = await fetch('http://localhost:8080/users/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json' // JSON 형식으로 전송\n        },\n        body: JSON.stringify(credentials),\n        // 사용자 정보 전송\n        credentials: 'include' // 쿠키 포함\n      });\n      if (response.ok) {\n        // 로그인 성공 시 사용자 정보 요청 API 호출\n        const userResponse = await fetch('http://localhost:8080/users/current-user', {\n          method: 'GET',\n          credentials: 'include' // 쿠키 포함\n        });\n        if (userResponse.ok) {\n          const user = await userResponse.json(); // 사용자 정보 응답\n          setUser(user); // 사용자 상태 업데이트\n          alert('로그인 성공');\n          navigate('/'); // 메인 페이지로 이동\n        } else {\n          setErrorMessage('사용자 정보를 가져오는 데 실패했습니다.');\n        }\n      } else if (response.status === 401) {\n        setErrorMessage('아이디 또는 비밀번호가 잘못되었습니다.'); // 인증 실패\n      } else {\n        setErrorMessage('로그인 중 오류가 발생했습니다. 다시 시도해주세요.'); // 기타 오류\n      }\n    } catch (error) {\n      console.error('로그인 에러:', error); // 에러 로그 출력\n      setErrorMessage('서버와의 연결에 문제가 발생했습니다.'); // 서버 연결 문제 메시지\n    } finally {\n      setLoading(false); // 로딩 상태 종료\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uB85C\\uADF8\\uC778\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 30\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleLogin,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"\\uC544\\uC774\\uB514:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: userId,\n        onChange: e => setUserId(e.target.value) // 아이디 상태 업데이트\n        ,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"\\uBE44\\uBC00\\uBC88\\uD638:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        value: password,\n        onChange: e => setPassword(e.target.value) // 비밀번호 상태 업데이트\n        ,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: loading,\n        children: [loading ? '로그인 중...' : '로그인', \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n}\n_s(Login, \"Fd9B5B4sjXyB/0ehQw87qG/PDbg=\", false, function () {\n  return [useNavigate];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","useNavigate","jsxDEV","_jsxDEV","Login","setUser","_s","userId","setUserId","password","setPassword","loading","setLoading","errorMessage","setErrorMessage","navigate","handleLogin","e","preventDefault","trim","credentials","userPassword","response","fetch","method","headers","body","JSON","stringify","ok","userResponse","user","json","alert","status","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","onSubmit","type","value","onChange","target","required","disabled","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/kyh-CafeProject/CafeProject/Cafe_Project/frontend/src/component/login.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport '../App.css';\r\n\r\n// 로그인 컴포넌트\r\nfunction Login({ setUser }) {\r\n    // 사용자 ID, 비밀번호, 로딩 상태, 에러 메시지 상태 변수\r\n    const [userId, setUserId] = useState(''); // 사용자 ID 상태\r\n    const [password, setPassword] = useState(''); // 비밀번호 상태\r\n    const [loading, setLoading] = useState(false); // 로딩 상태\r\n    const [errorMessage, setErrorMessage] = useState(''); // 에러 메시지 상태\r\n    const navigate = useNavigate(); // 페이지 이동을 위한 훅\r\n\r\n    // 로그인 처리 함수\r\n    const handleLogin = async (e) => {\r\n        e.preventDefault(); // 폼 기본 제출 동작 방지\r\n\r\n        // 아이디와 비밀번호가 입력되지 않은 경우 에러 메시지 설정\r\n        if (!userId.trim() || !password.trim()) {\r\n            setErrorMessage('아이디와 비밀번호를 입력해주세요.');\r\n            return;\r\n        }\r\n\r\n        // 로그인에 필요한 사용자 정보\r\n        const credentials = { userId, userPassword: password }; \r\n        setLoading(true); // 로딩 시작\r\n        setErrorMessage(''); // 에러 메시지 초기화\r\n\r\n        try {\r\n            // 로그인 API 호출\r\n            const response = await fetch('http://localhost:8080/users/login', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json', // JSON 형식으로 전송\r\n                },\r\n                body: JSON.stringify(credentials), // 사용자 정보 전송\r\n                credentials: 'include', // 쿠키 포함\r\n            });\r\n\r\n            if (response.ok) {\r\n                // 로그인 성공 시 사용자 정보 요청 API 호출\r\n                const userResponse = await fetch('http://localhost:8080/users/current-user', {\r\n                    method: 'GET',\r\n                    credentials: 'include', // 쿠키 포함\r\n                });\r\n\r\n                if (userResponse.ok) {\r\n                    const user = await userResponse.json(); // 사용자 정보 응답\r\n                    setUser(user); // 사용자 상태 업데이트\r\n                    alert('로그인 성공');\r\n                    navigate('/'); // 메인 페이지로 이동\r\n                } else {\r\n                    setErrorMessage('사용자 정보를 가져오는 데 실패했습니다.');\r\n                }\r\n            } else if (response.status === 401) {\r\n                setErrorMessage('아이디 또는 비밀번호가 잘못되었습니다.'); // 인증 실패\r\n            } else {\r\n                setErrorMessage('로그인 중 오류가 발생했습니다. 다시 시도해주세요.'); // 기타 오류\r\n            }\r\n        } catch (error) {\r\n            console.error('로그인 에러:', error); // 에러 로그 출력\r\n            setErrorMessage('서버와의 연결에 문제가 발생했습니다.'); // 서버 연결 문제 메시지\r\n        } finally {\r\n            setLoading(false); // 로딩 상태 종료\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"login-container\">\r\n            <h2>로그인</h2>\r\n            {/* 에러 메시지 표시 */}\r\n            {errorMessage && <p style={{ color: 'red' }}>{errorMessage}</p>}\r\n            {/* 로그인 폼 */}\r\n            <form onSubmit={handleLogin}>\r\n                <label>아이디:</label>\r\n                <input\r\n                    type=\"text\"\r\n                    value={userId}\r\n                    onChange={(e) => setUserId(e.target.value)} // 아이디 상태 업데이트\r\n                    required\r\n                /><br />\r\n\r\n                <label>비밀번호:</label>\r\n                <input\r\n                    type=\"password\"\r\n                    value={password}\r\n                    onChange={(e) => setPassword(e.target.value)} // 비밀번호 상태 업데이트\r\n                    required\r\n                /><br />\r\n\r\n                <button type=\"submit\" disabled={loading}>\r\n                    {loading ? '로그인 중...' : '로그인'} {/* 로딩 중 여부에 따라 버튼 텍스트 변경 */}\r\n                </button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Login;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}